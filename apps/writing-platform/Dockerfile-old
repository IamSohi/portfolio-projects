# Use an official Node.js image
FROM public.ecr.aws/lambda/nodejs:18 AS builder

# Set working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./
COPY esbuild.config.json ./

# Install dependencies
RUN npm install

# Copy application code
COPY backend/src/services/ services/
COPY backend/src/types.ts types.ts

RUN npm install -g esbuild
RUN yum update -y && yum install -y zip unzip

RUN esbuild types.ts --bundle --platform=node --outfile=dist/types.js

# Build packages
WORKDIR /app/services
# RUN esbuild authService.ts --bundle --platform=node --outfile=dist/authService.js --external:@auth
# RUN esbuild docService.ts --bundle --platform=node --outfile=dist/docService.js --external:@aws-sdk/client-dynamodb
# RUN esbuild llmService.ts --bundle --platform=node --outfile=dist/llmService.js --external:openai --external:@packages-utils
RUN esbuild authService.ts --bundle --platform=node --outfile=dist/authService.js --external:@auth --external:/opt/services --external:/opt/dist/utils --external:/opt/dist/auth --alias:@services=/opt/services --alias:@packages-util=/opt/dist/utils --alias:@auth=/opt/dist/auth
RUN esbuild docService.ts --bundle --platform=node --outfile=dist/docService.js --external:@aws-sdk/client-dynamodb --external:/opt/services --external:/opt/dist/utils --external:/opt/dist/auth --alias:@services=/opt/services --alias:@packages-util=/opt/dist/utils --alias:@auth=/opt/dist/auth
RUN esbuild llmService.ts --bundle --platform=node --outfile=dist/llmService.js --external:openai --external:@packages-utils --external:/opt/services --external:/opt/dist/utils --external:/opt/dist/auth --alias:@services=/opt/services --alias:@packages-util=/opt/dist/utils --alias:@auth=/opt/dist/auth
# Create a new directory for the layer
WORKDIR /app
RUN mkdir -p /asset/services

RUN mkdir -p /layer

# Copy built application code to the layer directory
RUN cp -r services/dist/* /asset/services
RUN cp -r dist/* /asset/
RUN cp -r node_modules /asset/

WORKDIR /asset
RUN zip -r common-layer.zip .

# Final image
FROM alpine:latest
COPY --from=builder /asset/common-layer.zip /asset/common-layer.zip

# Change ownership to avoid permission issues
# RUN chown -R 1001:1001 /app/layer.zip

# # Set the working directory to /
# WORKDIR /

# # Copy the zip file to the host machine
# COPY --from=builder /app/layer.zip .

# # Specify the output filename
# RUN echo "Output file: layer.zip"
